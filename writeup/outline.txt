%#######################################################################
Chapter 3. Validation



Four primary validation scores can be summarized in the table below:

            | Within-Parcel Similarity | Between-Parcel Dissimilarity |
____________|__________________________|______________________________|
Spatial     |       Adjacent-Score     |        Boundary-Score        |
____________|__________________________|______________________________|
Non-spatial |        Within-Score      |         Between-Score        |
____________|__________________________|______________________________|

The non-spatial Within-Score and Between-Score involve extensive computation, and thus had to be obtained by subsampling.

Stability is a criteria used for random parcellation algorithms to measure the similarity of multiple parcellations on the same data. Since none of the algorithms I have designed thus far are random, there was no need to measure stability.

Reproducibility is another criteria that measures how similar parcellations on different brains using the same algorithm are. An algorithm that gives reproducible results is desirable. Because I have only worked with one brain thus far, I have not used a criterion for reproducibility.

Related to reproducibility is the idea that it is more rigorous to compute the four validation scores on data that was not used for parcellation. When I use more brain data sets in my analysis in the future I will use cross-validation when computing the scores.


    On removing zero-voxels

For this algorithm to work well on the data set, I had to account for several thousand voxels whose time samples were all zeros. All edges connected to these zero voxels also had a weight of zero. If the zero voxels were unaccounted for, the algorithm would return a graph with one massive component and K - 1 singleton components consisting of zero voxels. The solution to this problem removed all zero voxels and their edges from the graph, ran the algorithm on the remainder, and [added the zero voxels back in, connecting them to the nearest component].
